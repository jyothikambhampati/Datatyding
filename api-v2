rm(list=ls(all=TRUE))

library(RCurl)
library(httr)
library(rjson)
library(tibble)
library(tidyverse)


#add city names here
cities = c("London","Madrid","Barcelona","Valencia","Mumbai","Granada","Salamanca","Singapore","Hong Kong","New York","Dubai","Rome","Las Vegas","Milan","Warsaw","Toronto")
#cities = c("London")


#DO NOT CHANGE THIS
api_key = "79b54045049e992fe3ae23152608b590"


#extract live forecast for next 5 days 
forecast = data.frame()
bin = data.frame()
main = data.frame() 
date_time = data.frame()
weather = data.frame()
wind = data.frame()


?gsub()
get_weather_forecast=function(api_key,city="",country="")
{
  url="http://api.openweathermap.org/data/2.5/forecast?"
  
  city=gsub(" ","+",city)
  country=gsub(" ","+",country)
  
  
  if(city != "")
  {
    url=paste(url,"q=",city,sep="")
    
    if(country!="")
    {
      url=paste(url,",",country,sep="")
    }
  }
  
  
  url=paste(url,"&APPID=",api_key,sep="")
  d=getURL(url)
  d=fromJSON(d)
  d
}




for(j in 1:length(cities)){
  
  data=get_weather_forecast(api_key,city=cities[j])
  
  for (i in 1:40) {
    bin = as.data.frame(data$list[[i]]$main)
    main = rbind(main,bin)    
    
    bin = as.data.frame(data$list[[i]]$dt_txt)
    date_time = rbind(date_time,bin)
    
    bin = as.data.frame(data$list[[i]]$weather)
    weather = rbind(weather,bin)
    
    bin = as.data.frame(data$list[[i]]$wind)
    wind = rbind(wind,bin)
  }
  
  temp = data.frame()
  temp = cbind(date_time,main,weather,wind)
  temp$City = data$city$name
  
  forecast = rbind(forecast,temp)
  
}

#data_raw <- enframe(unlist(data))

#colnames(temp)
#head(temp)
#attach(temp)
#temp$City
#cities

#colnames(forecast)[1] = c("date_time")
#colnames(forecast)
#head(forecast)



str(forecast)

head(forecast)

##################################################################################################################
#install.packages("ggthemes")
library(ggthemes)
require("ggthemes")

#install.packages("viridisLite")
library(viridisLite)
require("viridisLite")

#install.packages("shiny")
library(shiny)
require("shiny")

#install.packages("shinythemes")
library(shinythemes)
require("shinythemes")

#install.packages("ggplot2")
library(ggplot2)
require("ggplot2")

#install.packages("colorspace")
library(colorspace)
require("colorspace")


#install.packages("plotly")
library(plotly)
require("plotly")

#library(shinydashboard)
#library(markdown)
#library(plotly)
#library(tidyverse)
#library(WDI)
#library(wbstats)
#library(progress)
#library(Hmisc)
#library(maps)
#library(viridis)
#library(mapproj)
#library(mapdata)


head(forecast)
colnames(forecast)

colnames(forecast)

City <- forecast$City

City

X <- forecast

forecast[,1]

colnames(X)

datetime <- forecast[,1]

datetime

colnames(X)

colnames(X[,-1])

X <- cbind(datetime,X[,-1])

head(X)

X$datetime

day <- substr(X$datetime,9,10)
day

month <- substr(X$datetime,6,7)
month

year <- substr(X$datetime,1,4)
year

hour <- substr(X$datetime,12,13)
hour

# value is always yyyy-mm-dd, even if the display format is different
date <- paste(month,day,year,sep = "/")
date


X <- cbind(date,hour,X)
head(X)

#, format = "mm/dd/yy")

head(X)

measure <- colnames(X)

colnames(forecast)

measure

colnames(X)

lista <- c("Temperature","Pressure","Humidity","Wind")




is.data.frame(lista)

# Define UI for application that draws a histogram

ui <- fluidPage(
  theme = shinytheme("slate"),
  # Application title
  navbarPage(title="Weather Forecasting",
             tabPanel(title="Hourly Forecast",icon=icon("fas fa-chart-line"),
                      titlePanel("Forecast"),
                      
                      # Sidebar with a slider input for number of bins 
                      sidebarLayout(
                        sidebarPanel(
                          selectInput(inputId = "City1",
                                      label = "Choose your City",
                                      choices = sort(unique(City))),
                          
                          selectInput(inputId = "lista",
                                      label = "Choose your measure",
                                      choices = sort(unique(lista))),
                          # value is always yyyy-mm-dd, even if the display format is different
                          dateInput("date", "Date:", value = date, format = "mm/dd/yy"),
                          sliderInput(inputId = "hour",
                                      label = "Hourly Forecast",
                                      min = 1,max = 24, value = hour
                          )
                        ),
                        # Show a plot of the generated distribution
                        mainPanel(
                          plotlyOutput("Output1")
                        
                        )
                      )
             )
             
  ))

is.data.frame(X$temp)
# Define server logic required to draw a histogram
server <- function(input, output) {
  
  output$Output1 <- renderPlotly(
    
    {
      if(lista=="Temperature")
      {
        ggplot(data = forecast$temp, aes(x = datetime, y = City))+
          geom_line(color = "#00AFBB", size = 0.5) + ggtitle('temperature')+
          xlab('Date') + ylab('Temperature in Celsius')
      }
    
    
    
  })
}

#output$temp <- renderPlotly({ggplot(data = temp, aes(x = datetime, y = City))+
 #   geom_line(color = "#00AFBB", size = 0.5) + ggtitle('temperature')+
  #  xlab('Date') + ylab('Temperature in Celsius')
  


# Run the application 
shinyApp(ui = ui, server = server)












boxplot(forecast$temp~ forecast$City,xlab="",ylab="temperature",main="Temperature by City (in Kelvins)")
boxplot(forecast$humidity~ forecast$City,xlab="",ylab="Humidity",main="Humidity by City")
rm(bin,data,date_time,main,temp,weather,wind)






#extract live current 
current = data.frame()
bin = data.frame()
main = data.frame() 
date_time = data.frame()
weather = data.frame()
wind = data.frame()
visibility = data.frame()
clouds = data.frame()




get_weather_current=function(api_key,city="",country="")
{
  url="http://api.openweathermap.org/data/2.5/weather?"
  
  city=gsub(" ","+",city)
  country=gsub(" ","+",country)
  
  if(city != "")
  {
    url=paste(url,"q=",city,sep="")
    
    if(country!="")
    {
      url=paste(url,",",country,sep="")
    }
  }
  
  url=paste(url,"&APPID=",api_key,sep="")
  d=getURL(url)
  d=fromJSON(d)
  d
}

data=get_weather_current(api_key,city=cities[2])

for(j in 1:length(cities)){
  data=get_weather_current(api_key,city=cities[j])
  
  main = as.data.frame(data$main)
  
  date_time = as.data.frame(data$dt)
  
  weather = as.data.frame(data$weather)
  
  wind = as.data.frame(data$wind)
  wind = wind[,c("speed")]
  
  visibility = as.data.frame(data$visibility)
  
  clouds = as.data.frame(data$clouds)
  
  temp = data.frame()
  temp = cbind(date_time,main,weather,wind,visibility,clouds)
  temp$City = data$name
  current = rbind(current,temp) 
  
}


colnames(current)[1] = c("date_time")
current$date_time = as.POSIXct(current$date_time, origin="1970-01-01")
colnames(current)[13] = c("Visibility")

str(current)
rm(bin,data,date_time,main,temp,weather,wind,visibility,clouds)

